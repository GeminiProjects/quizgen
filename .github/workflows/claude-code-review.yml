name: 🤖 Claude AI 代码审查

on:
  pull_request:
    types: [opened, synchronize]
    # Optional: Only run on specific file changes
    # paths:
    #   - "src/**/*.ts"
    #   - "src/**/*.tsx"
    #   - "src/**/*.js"
    #   - "src/**/*.jsx"

jobs:
  claude-review:
    name: 🔍 AI 智能代码审查
    # Optional: Filter by PR author
    # if: |
    #   github.event.pull_request.user.login == 'external-contributor' ||
    #   github.event.pull_request.user.login == 'new-developer' ||
    #   github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR'
    
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    
    steps:
      - name: 📥 检出代码仓库
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 🤖 运行 Claude AI 代码审查
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          
          # Direct prompt for automated review (no @claude mention needed)
          direct_prompt: |
            请用精炼、通俗易懂的中文对这个 PR 进行代码审查，重点关注：
            
            ## 📋 审查要点
            1. **代码质量**：是否符合项目代码规范（参考 CLAUDE.md）
            2. **潜在问题**：是否存在逻辑错误或边界情况未处理
            3. **性能优化**：是否有性能瓶颈或优化空间
            4. **安全风险**：是否存在安全漏洞或数据泄露风险
            5. **测试覆盖**：是否有足够的测试用例
            
            ## 💡 反馈原则
            - 用简洁明了的中文表达
            - 提供具体的改进建议和代码示例
            - 对于新手贡献者，给予鼓励和详细解释
            - 标注问题严重程度：🔴 严重 / 🟡 建议 / 🟢 优秀

          # Optional: Use sticky comments to make Claude reuse the same comment on subsequent pushes to the same PR
          # use_sticky_comment: true
          
          # Optional: Customize review based on file types
          # direct_prompt: |
          #   Review this PR focusing on:
          #   - For TypeScript files: Type safety and proper interface usage
          #   - For API endpoints: Security, input validation, and error handling
          #   - For React components: Performance, accessibility, and best practices
          #   - For tests: Coverage, edge cases, and test quality
          
          # Optional: Different prompts for different authors
          # direct_prompt: |
          #   ${{ github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' && 
          #   'Welcome! Please review this PR from a first-time contributor. Be encouraging and provide detailed explanations for any suggestions.' ||
          #   'Please provide a thorough code review focusing on our coding standards and best practices.' }}
          
          # Optional: Add specific tools for running tests or linting
          allowed_tools: "Bash(bun test),Bash(bun check),Bash(bun format --check)"
